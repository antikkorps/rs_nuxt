// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Schema

//User data
enum Sex {
  MALE
  FEMALE
  OTHER
  DO_NOT_WANT_TO_SAY
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  pseudo           String             @unique
  firstname        String?
  lastname         String?
  password         String
  resetToken       String?
  webpage          String?
  textPresentation String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  avatar           String?
  birth            DateTime?
  isTattooArtist   Boolean            @default(false)
  sex              Sex?
  subscriptions    SubscriptionUser[]
  salons           Salon[]            @relation("userToSalons")
  profile_image    ProfileImage[]     @relation("profileImage")
  banner_image     BannerImage[]      @relation("bannerImage")

  i_follow    Follow[] @relation("followerId")
  they_follow Follow[] @relation("followedId")

  roles RoleUser[]

  posts             Post[]           @relation("posts")
  // savedPost         SavedPost[]      @relation("userSavedPosts")
  bookMark          Bookmark[]       @relation("userBookmarks")
  userComments      Comment[]        @relation("userComments")
  userReports       Report[]         @relation("userReporting")
  messages_emitted  InstantMessage[] @relation("EmitterMessages")
  messages_received InstantMessage[] @relation("ReceiverMessages")
  pinned_post       PinnedPost[]     @relation("userPinnedPost")

  confirmedAt DateTime?
  postLikes         PostLike[]       @relation("userPostLikes")
  commentLikes      CommentLike[]    @relation("userCommentLikes")

  @@index(fields: [firstname, lastname, email], name: "main_user_index")
  @@map("users")
}

// Everything related to posts, comments && likes
model Post {
  id          Int     @id @default(autoincrement())
  title       String?
  description String?

  views      Int?
  shared     Int?
  repost     Int?
  userId     String
  user       User        @relation("posts", fields: [userId], references: [id])
  tags       PostTag[]   @relation("postTags")
  // Maybe we can delete mediaPost
  mediaPosts MediaPost[] @relation("mediaPost")


  comments        Comment[]    @relation("postComments")
  // userSavedPosts SavedPost[]  @relation("userSavedPosts")
  bookmarkedPosts Bookmark[]   @relation("userBookmarks")
  pinnedPosts     PinnedPost[] @relation("pinnedPost")

  postLikes       PostLike[]   @relation("postLikes")

  // Add for the post Content by Karl 12/01
  postTypeChoice PostTypeChoice[] @relation("postType")
  modo_status    ModoChoiceStatus @default(PENDING)
  user_status    UserChoiceStatus @default(DRAFT)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?


  @@index([userId, id], name: "main_post_index")
  @@map("posts")
}

model PostLike {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation("postLikes", fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation("userPostLikes", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId, postId], name: "main_post_like_index")
  @@map("postLikes")
}

enum PostType {
  MEDIA
  TEXT
  SHAREDPOST
  SHAREDPROFILE
  SHAREDMEDIA
}

enum ModoChoiceStatus {
  PENDING
  VALIDATED
  MODERATED
}

enum UserChoiceStatus {
  DRAFT
  ARCHIVED
  PUBLISHED
}

model PostTypeChoice {
  id      Int           @id @default(autoincrement())
  post    Post          @relation("postType", fields: [postId], references: [id])
  postId  Int
  type    PostType
  content PostContent[] @relation("postTypeContent")

  @@map("postTypeChoices")
}

model PostContent {
  id         Int            @id @default(autoincrement())
  postType   PostTypeChoice @relation("postTypeContent", fields: [postTypeId], references: [id], onDelete: Cascade)
  postTypeId Int
  content    String

  @@map("postContents")
}

model PinnedPost {
  id        Int       @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation("userPinnedPost", fields: [userId], references: [id])
  post Post @relation("pinnedPost", fields: [postId], references: [id])

  @@map("pinnedPosts")
}

// We certainly can delete this model MediaPost now
model MediaPost {
  id     Int     @id @default(autoincrement())
  url    String
  name   String?
  status Boolean @default(false)
  postId Int
  post   Post    @relation("mediaPost", fields: [postId], references: [id])

  @@map("mediaPosts")
}

// model SavedPost {
//   id     Int  @id @default(autoincrement())
//   userId Int
//   user   User @relation("userSavedPosts", fields: [userId], references: [id])

//   postId Int
//   post   Post @relation("userSavedPosts", fields: [postId], references: [id])

//   @@unique([userId, postId])
//   @@map("savedPosts")
// }
model Bookmark {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation("userBookmarks", fields: [userId], references: [id])

  postId Int
  post   Post @relation("userBookmarks", fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("bookmarks")
}

model PostTag {
  // A tester avec ce nouvel "ID"
  id     Int  @id @default(autoincrement())
  postId Int
  post   Post @relation("postTags", fields: [postId], references: [id], onDelete: Cascade)

  tagName String
  tag     Tag    @relation("tagName", fields: [tagName], references: [name])

  // @@id([postId, tagName])
  // @@unique([postId, tagName])
  @@map("postsTags")
}

model Comment {
  id          Int     @id @default(autoincrement())
  description String?

  postId Int
  post   Post   @relation("postComments", fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation("userComments", fields: [userId], references: [id], onDelete: Cascade)

  parent   Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[] @relation("ParentChild")
  parentId Int?

  depth Int @default(1)

  commentLikes CommentLike[] @relation("commentLikes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("comments")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  commentId Int
  comment   Comment  @relation("commentLikes", fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation("userCommentLikes", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
  @@index([userId, commentId], name: "main_comment_like_index")
  @@map("commentLikes")
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[] @relation("tagName")

  @@map("tags")
}

// Polymorphic like


enum LikeType {
  POST
  COMMENT
  MEDIA
  IMAGE
  INSTANT_MESSAGE
}

//Polymorphic message content
//MessageContent hold the content of the polymorphic message and is referenced in InstantMessage 
//TextContent and EmojiContent are the polymorphic message content

model MessageContent {
  id Int @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instantMessage   InstantMessage @relation(fields: [instantMessageId], references: [id], onDelete: Cascade)
  instantMessageId Int

  textContents  TextContent[]
  emojiContents EmojiContent[]
}

model TextContent {
  id Int @id @default(autoincrement())

  text String

  messageContent   MessageContent @relation(fields: [messageContentId], references: [id])
  messageContentId Int
}

model EmojiContent {
  emoji   Emoji @relation(fields: [emojiId], references: [id])
  emojiId Int

  messageContent   MessageContent @relation(fields: [messageContentId], references: [id])
  messageContentId Int

  @@id([emojiId, messageContentId])
}

model InstantMessage {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userEmitter User   @relation("EmitterMessages", fields: [emitterId], references: [id], onDelete: Cascade)
  emitterId   String

  userReceiver User   @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId   String

  contents MessageContent[]

  @@map("instant_messages")
}

model Emoji {
  id   Int    @id @default(autoincrement())
  name String @unique
  slug String @unique

  emojiContents EmojiContent[]

  @@index([name, slug], name: "main_emoji_index")
  @@map("emojis")
}

// TABLES ABONNEMENT
model SubscriptionUser {
  id                 Int       @id @default(autoincrement())
  since_month        String?
  billing_start_date DateTime?
  billing_end_date   DateTime?
  status             String
  billing_next_date  DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@unique([userId, subscriptionId])
  @@map("subscriptions_users")
}

model Subscription {
  id             Int                         @id @default(autoincrement())
  name           String                      @unique
  slug           String                      @unique
  price          Float
  users          SubscriptionUser[]
  authorizations AuthorizationSubscription[] // Relation many-to-many

  @@map("subscriptions")
}

model Salon {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  slug        String @unique
  logo        String?
  street      String
  zipcode     String
  city        String
  country     String
  userId      String
  user        User    @relation("userToSalons", fields: [userId], references: [id])

  @@map("salons")
}

// MANAGING
enum ReportType {
  POST
  PROFILE
  MEDIA
  MESSAGE
}

model Report {
  id            Int        @id @default(autoincrement())
  content       String
  reportType    ReportType
  reportItemId  Int
  userReporting User       @relation("userReporting", fields: [userId], references: [id])
  userId        String
}

// TABLES PERMISSIONS
model Role {
  id             Int                 @id @default(autoincrement())
  name           String              @unique
  slug           String              @unique
  authorizations AuthorizationRole[]

  users RoleUser[]

  @@map("roles")
}

model RoleUser {
  userId String
  // roleId Int

  roleSlug String

  user User @relation(fields: [userId], references: [id])
  // role Role @relation(fields: [roleId], references: [id])
  role Role @relation(fields: [roleSlug], references: [slug])

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, roleSlug])
  @@map("roles_users")
}

model Authorization {
  id            Int                         @id @default(autoincrement())
  name          String                      @unique
  slug          String                      @unique
  roles         AuthorizationRole[]
  subscriptions AuthorizationSubscription[] // Relation many-to-many

  @@map("authorizations")
}

// TABLES PIVOTS

model AuthorizationRole {
  id              Int @id @default(autoincrement())
  roleId          Int
  authorizationId Int

  role          Role          @relation(fields: [roleId], references: [id])
  authorization Authorization @relation(fields: [authorizationId], references: [id])

  @@unique([roleId, authorizationId])
}

model AuthorizationSubscription {
  id              Int @id @default(autoincrement())
  subscriptionId  Int
  authorizationId Int

  subscription  Subscription  @relation(fields: [subscriptionId], references: [id])
  authorization Authorization @relation(fields: [authorizationId], references: [id])

  @@unique([subscriptionId, authorizationId])
}

enum ImageStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model ProfileImage {
  id     Int         @id @default(autoincrement())
  url    String
  name   String?
  status ImageStatus @default(ACTIVE)
  userId String
  user   User        @relation("profileImage", fields: [userId], references: [id])

  @@map("profileImages")
}

enum BannerStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model BannerImage {
  id     Int          @id @default(autoincrement())
  url    String
  name   String?
  status BannerStatus @default(ACTIVE)
  userId String
  user   User         @relation("bannerImage", fields: [userId], references: [id])

  @@map("bannerImages")
}

model Follow {
  id         Int    @id @default(autoincrement())
  followerId String
  follower   User   @relation("followerId", fields: [followerId], references: [id])

  followedId String
  followed   User   @relation("followedId", fields: [followedId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followedId])
  @@map("follows")
}

//  Autre tables

model Contact {
  id      Int     @id @default(autoincrement())
  name    String?
  email   String?
  phone   String?
  purpose String?
  message String?

  @@map("contacts")
}
